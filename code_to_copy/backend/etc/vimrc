"make the coding ok
set encoding=utf-8
set fencs=ucs-bom,utf-8,euc-cn,cp936,gb18030,latin1 " fileencodings
source $VIMRUNTIME/delmenu.vim

" source $VIMRUNTIME/menu.vim
" language messages zh_CN.utf-8
" set nocp " 更远离vi,接近人类...
set wildmenu  " tab的时候会显示哪些可选项
set wildignore+=*.o,*.obj,*.pyc


" XXX 需要安装插件
" call pathogen#infect()



highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/


set hlsearch
set lbr " set linebreak
set wrap
set laststatus=2
set statusline=%<%f\%h%m%r%=%-20.(line=%l\ \ col=%c%V\ \ totlin=%L%)\ \ \%h%m%r%=%-40(bytval=0x%B,%n%Y%)\%P

" set fdm=marker
" set fdm=syntax


set ai "auto indent
" set cindent
" set list "show the control charactor
set sm "show match
set expandtab
set tabstop=4
set shiftwidth=4
autocmd FileType c,cpp setlocal shiftwidth=2 tabstop=2
set number
set ignorecase
set smartcase
set scrolloff=10 " always keep 10 lines visible.

" set tw=80 " gq to format long lines, default to 0, if set 80, it will auto format the line

"map th :tabpre<cr>  "gT
"map tl :tabnext<cr> "gt
"map tc :tabclose<cr>
map tn :tabnew<cr>
map tm :tabmove

" XXX vim7.3 only
" set cc=120
highlight ColorColumn ctermbg=Cyan


map <leader>p "0p

" buffers
map <C-j> :bnext<CR>
map <C-k> :bNext<CR>
map gb :buffers<CR>


" let g:neocomplcache_enable_at_startup = 1
" syntax on  " 这个会 overrule solarized 的 color schema
set nocompatible
filetype plugin on

" make markdown highlight works
" autocmd BufRead,BufNew *.md,*.markdown set filetype=markdown


" 十六进制编辑功能 :call Hexedit()
func! Hexedit()
    exec ":% !xxd"
endfunc
func! HexeditRevert()
    exec ":% !xxd -r"
endfunc



map <F9>p :call CompilePython()<cr>
func! CompilePython()
    exec "w"
    exec "!echo -e '\033[1;34m-----------here\ is\ the\ ans\ of\ %----------\033[0m';python \"%\""
endfunc

map <F9>s :call RunShell()<cr>
func! RunShell()
    exec "w"
    exec "!echo -e '\033[1;34m-----------here\ is\ the\ ans\ of\ %----------\033[0m';bash \"%\""
endfunc

map <F9>c :call CompileRunCpp()<CR>
func! CompileRunCpp()
    exec "w"
    exec "!echo -e '\033[1;32mcompiling.....\033[0m';g++ -std=c++11 \"%\" -o \"%:r.exe\";echo -e '\033[1;34m-----------here_is_the_ans_of_%----------\033[0m';./\"%:r.exe\";echo -e '\033[1;33mend...\033[0m';rm \"%:r.exe\""
    "exec "!./%:r.exe"
endfunc

map <F9>j :call CompileRunJava()<CR>
func! CompileRunJava()
    exec "w"
    exec "!echo -e '\033[1;32mcompiling.....\033[0m';javac %;echo -e '\033[1;34m-----------here_is_the_ans_of_%----------\033[0m';java %:r;echo -e '\033[1;33mend...\033[0m';rm %:r.class"
endfunc

map <F9>g :call CompileRunGo()<CR>
func! CompileRunGo()
    exec "w"
    exec "!go run %"
endfunc

nnoremap <F11> :set paste!<CR>

nnoremap <F10> :set spell!<CR>


" Because vim-airline 已经可以显示格式问题了，所以不需要它来高粱尾部空格了
" highlight the trailing whitespace, keep your code clean
" http://vim.wikia.com/wiki/Highlight_unwanted_spaces
" highlight ExtraWhitespace ctermbg=red guibg=red
" augroup WhitespaceMatch
"   " Remove ALL autocommands for the WhitespaceMatch group.
"   autocmd!
"   autocmd BufWinEnter * let w:whitespace_match_number =
"         \ matchadd('ExtraWhitespace', '\s\+$')
"   autocmd InsertEnter * call s:ToggleWhitespaceMatch('i')
"   autocmd InsertLeave * call s:ToggleWhitespaceMatch('n')
" augroup END
" function! s:ToggleWhitespaceMatch(mode)
"   let pattern = (a:mode == 'i') ? '\s\+\%#\@<!$' : '\s\+$'
"   if exists('w:whitespace_match_number')
"     call matchdelete(w:whitespace_match_number)
"     call matchadd('ExtraWhitespace', pattern, 10, w:whitespace_match_number)
"   else
"     " Something went wrong, try to be graceful.
"     let w:whitespace_match_number =  matchadd('ExtraWhitespace', pattern)
"   endif
" endfunction



" Go to the last cursor location when a file is opened, unless this is a
" git commit (in which case it's annoying)
au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") && &filetype != "gitcommit" |
        \ execute("normal `\"") |
    \ endif
" https://stackoverflow.com/a/774599
" 如果不行一般是因为权限问题: sudo chown user: ~/.viminfo


" highlight current line
set cursorline


" .dein.vim
if &compatible
  set nocompatible
endif
set runtimepath+=~/.dein.vim/repos/github.com/Shougo/dein.vim/
call dein#begin('~/.dein.vim/')
call dein#add('Shougo/dein.vim')
call dein#add('scrooloose/nerdtree')
call dein#add('majutsushi/tagbar')
call dein#add('altercation/vim-colors-solarized', {'merged': 0})
call dein#source('vim-colors-solarized')
call dein#add('fatih/vim-go')
call dein#add('Valloric/YouCompleteMe')
call dein#add('tomtom/tcomment_vim')
call dein#add('rdnetto/YCM-Generator')
call dein#add('nvie/vim-flake8')
call dein#add('jpalardy/vim-slime')
call dein#add('ctrlpvim/ctrlp.vim')
call dein#add('vim-airline/vim-airline')
call dein#add('vim-airline/vim-airline-themes')
call dein#add('heavenshell/vim-pydocstring')
call dein#add('tell-k/vim-autopep8')
call dein#add('python-mode/python-mode')
call dein#add('tpope/vim-surround')
" call dein#add('vim-scripts/bash-support.vim')
" this is confilict with vim-table-mode
" :verbose map <LocalLeader>tm  would show all plugins use this mapping
call dein#add('dhruvasagar/vim-table-mode')
call dein#add('mileszs/ack.vim')
call dein#end()

filetype plugin indent on
syntax enable

" :call dein#install()  to install


" bundle 里的这些插件
" 源于 http://python.42qu.com/11180003


"
" The plugins I always need
"


" BEGIN color  XXX 需要安装插件
" let g:solarized_termtrans=1
" let g:solarized_visibility="low"

" 这几个顺序别乱
syntax enable
set background=dark
let g:solarized_termcolors=256
silent! colorscheme solarized
" END color



"
" Pathogen http://www.vim.org/scripts/script.php?script_id=2332
"   mkdir -p ~/.vim/bundle
"


"
" Deprecated because of ruby dependency
" command-T http://www.vim.org/scripts/script.php?script_id=3025
"   :ruby 1  or  +ruby
"   sudo apt-get install ruby ruby-mkrf ruby-dev
"   Do what the page tell you !!!!
"
" let g:CommandTWildIgnore=&wildignore . ",*.o,*.obj,.git,*.pyc,*/migrations/*,django,*static/plugins/*,*Godeps/_workspace/*"
" map <leader>f :CommandTFlush<CR>


"
" ctrlp.vim
" https://github.com/kien/ctrlp.vim
let g:ctrlp_working_path_mode = 'wa'



"
" vimwiki http://www.vim.org/scripts/script.php?script_id=2226
"
" map tb :VimwikiTable
map t<space> <Plug>VimwikiToggleListItem
let g:vimwiki_hl_headers = 1
" let g:vimwiki_conceallevel = 0


"
" Nerdtree http://www.vim.org/scripts/script.php?script_id=1658
"
nnoremap <silent> <F7> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\.pyc$', '\.orig$', '\.pyo$']


"
" Tagbar http://www.vim.org/scripts/script.php?script_id=3465
"
" nnoremap <silent> <F8> :TlistToggle<CR>
nnoremap <silent> <F8> :TagbarToggle<CR>
let g:tagbar_sort = 0


"
" vim-flake8 , PyFlakes to find static programming errors and  PEP8 ...
"   git clone https://github.com/nvie/vim-flake8 ~/.vim/bundle/
"   sudo apt-get install python-flake8
let g:no_flake8_maps=1
" autocmd BufWritePost *.py call Flake8() " XXX 这个功能需要安装插件
autocmd FileType python map <buffer> <F12> :call Flake8()<CR>


"
" matchit http://www.vim.org/scripts/script.php?script_id=39
"


"
" YouCompleteMe
" http://valloric.github.io/YouCompleteMe/
" 精简文档：http://www.alexeyshmalko.com/2014/youcompleteme-ultimate-autocomplete-plugin-for-vim/
"
" 亮点：  可以兼容UltiSnips了  python 和 C的补全都很棒, 补全是字串补全, GoTo 这些子命令, 可以和go-vim兼容
"
" * INSTALL *
" apt-get install python-dev
" cd ~/.vim/bundle
" git clone https://github.com/Valloric/YouCompleteMe.git
" cd YouCompleteMe
" git submodule update --init --recursive
" ./install.sh --clang-completer
"
" 其他
" <leader>d 是默认用于Diagnostic display的, 而且是用于C-family
" 需要用 :YcmGenerateConfig 项目根目录在根目录下生成 .ycm_extra_conf.py
" 如果生成失败，则用
" ~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py
" 需要自己修改一下前面的flags, 可以make的时候ps grep 一下看看 -I 都有些啥
" 典型的可以加上
" '-I../../include',
" '-I../include',
" '-I./include',
" '-Iinclude',
" '-I.',
" && make所出现的一些东西
" 这些单数可能会影响std里的东西的跳转: -nostdinc, -nostdlib,
" 一些类似于sgx中的stl的port
let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"
let g:ycm_confirm_extra_conf=0
au FileType c,cpp,objc,objcpp,python,cs nmap gd :YcmCompleter GoTo<cr>
au FileType c,cpp,objc,objcpp,python,cs nmap gD :YcmCompleter GoToDeclaration<cr>
" ycm for debug
" let g:ycm_keep_logfiles = 1
" let g:ycm_log_level = 'debug'
" 如果import ycm_core报错ImportError: dynamic module does not define init function (initycm_core)
" 主要是buiding和loading的python版本不一致导致的(比如装了anaconda后再build), 下面的方法可以解决
" This is necessary when using ubuntu, otherwise it will report module ycm_core not found ERROR.
" let g:ycm_server_python_interpreter = '/usr/local/bin/python'
let g:ycm_server_python_interpreter = '/usr/bin/python'
let g:ycm_goto_buffer_command = 'new-or-existing-tab'


"
" vim-go
" https://github.com/fatih/vim-go
" 集成了绝大部分go的开发环境
" 依赖 GOPATH, GOROOT
" 查文档时不会在项目里查，因为不知道项目在哪里呀！
" 所以回去系统默认的函数库中(依赖GOROOT??) 和 GOPATH/src下查询，所以设置好gopath非常重要呀
"
" 有用的命令
" :GoImports 自动import缺失工具
" :GoCallers
" 这个可能有很多可能性，只会列出一种情况(TODO:想想原理是啥，以后别被这个坑才好)
" :GoImplements 找到interface的实现， 和 GoCallers 那几个命令都是依赖于
" oracle的， 但是还不知道怎么用 g:go_oracle_scope 这个参数, 用 下面这个成功过
" let g:go_oracle_scope = 'github.com/GoogleCloudPlatform/kubernetes/cmd/kubectl XXXX'
" 但是非常的慢
au FileType go nmap <Leader>gd <Plug>(go-doc)



"
" TComment
" https://github.com/tomtom/tcomment_vim
" gc 确定一切


"
" vim-slime
" https://github.com/jpalardy/vim-slime
" NOTICE: slime代表着一种边写脚本边搞bash的习惯！一种新的思维方式
" ":i.j" means the ith window, jth pane
" C-c, C-c  --- the same as slime
" C-c, v    --- mnemonic: "variables"
let g:slime_target = "tmux"
" 这个一定要和ipython一起用，否则可能出现换行出问题
let g:slime_python_ipython = 1



" 
" vim-airline-themes
let g:airline_theme='dark'


"
" heavenshell/vim-pydocstring
nmap <silent> <C-N> <Plug>(pydocstring)



"
" python-mode
" 这个插件遇到过保存失败,导致运行脚本跑的不是最新代码！！！！
" help PymodeDoc
" this plugin will auto folder all the code, please use `:help zo` to find the code
let g:pymode_lint_ignore = ["E0100", "E501", "E402"]
" E402 module level import not at top of file
let g:pymode_rope=0  " disable refracting because I don't use it
let g:pymode_folding=0  " auto folding really makes python coding really slow.
" lint还是挺有用的，改完代码马上就能检查出一些语法错误，不必等到运行时发现
let g:pymode_lint_unmodified = 1  " Check code on every save (every)





"
" vim-surround
" https://github.com/tpope/vim-surround
"




" 
" bash-support
" https://www.tecmint.com/use-vim-as-bash-ide-using-bash-support-in-linux/
"

" 
" mileszs/ack.vim
let g:ackprg = 'ag --vimgrep'
nnoremap <Leader>a :Ack 



" global settings
" 检查按键到底被映射成什么了
" :verbose nmap <CR>
