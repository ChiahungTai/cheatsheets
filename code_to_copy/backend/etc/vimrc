"make the coding ok
set encoding=utf-8
set fencs=ucs-bom,utf-8,euc-cn,cp936,gb18030,latin1 " fileencodings
source $VIMRUNTIME/delmenu.vim

" source $VIMRUNTIME/menu.vim
" language messages zh_CN.utf-8
" set nocp " 更远离vi,接近人类...
set wildmenu  " tab的时候会显示哪些可选项
set wildignore+=*.o,*.obj,*.pyc


" XXX 需要安装插件
call pathogen#infect() 


" BEGIN color  XXX 需要安装插件
" let g:solarized_termtrans=1
" let g:solarized_visibility="low"

" 这几个顺序别乱
syntax enable
set background=dark
let g:solarized_termcolors=256
colorscheme solarized
" END color


set hlsearch
set lbr " set linebreak
set laststatus=2
set statusline=%<%f\%h%m%r%=%-20.(line=%l\ \ col=%c%V\ \ totlin=%L%)\ \ \%h%m%r%=%-40(bytval=0x%B,%n%Y%)\%P

" set fdm=marker
" set fdm=syntax


set ai "auto indent
" set cindent
" set list "show the control charactor
set sm "show match
set expandtab 
set tabstop=4
set shiftwidth=4
set number
set ignorecase
set smartcase
"map th :tabpre<cr>  "gT
"map tl :tabnext<cr> "gt
"map tc :tabclose<cr>
map tn :tabnew<cr>
map tm :tabmove 

" XXX vim7.3 only
set cc=120
highlight ColorColumn ctermbg=Cyan


map <C-p> "0p

" buffers
map <C-j> :bnext<CR>
map <C-k> :bNext<CR>
map gb :buffers<CR>


" let g:neocomplcache_enable_at_startup = 1
" syntax on  " 这个会 overrule solarized 的 color schema
set nocompatible
filetype plugin on 

" make markdown highlight works
autocmd BufRead,BufNew *.md,*.markdown set filetype=markdown


" 十六进制编辑功能 :call Hexedit()
func! Hexedit()
    exec ":% !xxd"
endfunc
func! HexeditRevert()
    exec ":% !xxd -r"
endfunc



map <F9>p :call CompilePython()<cr>
func! CompilePython()
    exec "w"
    exec "!echo -e '\033[1;34m-----------here\ is\ the\ ans\ of\ %----------\033[0m';python \"%\""
endfunc

map <F9>s :call RunShell()<cr>
func! RunShell()
    exec "w"
    exec "!echo -e '\033[1;34m-----------here\ is\ the\ ans\ of\ %----------\033[0m';bash \"%\""
endfunc

map <F9>c :call CompileRunCpp()<CR>
func! CompileRunCpp()
    exec "w"
    exec "!echo -e '\033[1;32mcompiling.....\033[0m';g++ -std=c++11 \"%\" -o \"%:r.exe\";echo -e '\033[1;34m-----------here_is_the_ans_of_%----------\033[0m';./\"%:r.exe\";echo -e '\033[1;33mend...\033[0m';rm \"%:r.exe\""
    "exec "!./%:r.exe"
endfunc

map <F9>j :call CompileRunJava()<CR>
func! CompileRunJava()
    exec "w"
    exec "!echo -e '\033[1;32mcompiling.....\033[0m';javac %;echo -e '\033[1;34m-----------here_is_the_ans_of_%----------\033[0m';java %:r;echo -e '\033[1;33mend...\033[0m';rm %:r.class"
endfunc

map <F9>g :call CompileRunGo()<CR>
func! CompileRunGo()
    exec "w"
    exec "!go run %"
endfunc

" bundle 里的这些插件
" 源于 http://python.42qu.com/11180003







"
"  
"
"
" The plugins I always need
"


"
" Pathogen http://www.vim.org/scripts/script.php?script_id=2332
"   mkdir -p ~/.vim/bundle
"


"
" command-T http://www.vim.org/scripts/script.php?script_id=3025
"   :ruby 1  or  +ruby
"   sudo apt-get install ruby ruby-mkrf ruby-dev
"   Do what the page tell you !!!!
"
let g:CommandTWildIgnore=&wildignore . ",*.o,*.obj,.git,*.pyc,*/migrations/*,django,*static/plugins/*,*Godeps/_workspace/*"
map <leader>f :CommandTFlush<CR>



"
" vimwiki http://www.vim.org/scripts/script.php?script_id=2226
"
" map tb :VimwikiTable 
map t<space> <Plug>VimwikiToggleListItem
let g:vimwiki_hl_headers = 1
" let g:vimwiki_conceallevel = 0


"
" Nerdtree http://www.vim.org/scripts/script.php?script_id=1658
"
nnoremap <silent> <F7> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\.pyc$', '\.orig$', '\.pyo$']


"
" Tagbar http://www.vim.org/scripts/script.php?script_id=3465
"
" nnoremap <silent> <F8> :TlistToggle<CR>
nnoremap <silent> <F8> :TagbarToggle<CR>


"
" vim-flake8 , PyFlakes to find static programming errors and  PEP8 ...
"   git clone https://github.com/nvie/vim-flake8 ~/.vim/bundle/
"   sudo apt-get install python-flake8
let g:no_flake8_maps=1
" autocmd BufWritePost *.py call Flake8() " XXX 这个功能需要安装插件
autocmd FileType python map <buffer> <F12> :call Flake8()<CR>


"
" matchit http://www.vim.org/scripts/script.php?script_id=39
"


"
" YouCompleteMe
" http://valloric.github.io/YouCompleteMe/
" 精简文档：http://www.alexeyshmalko.com/2014/youcompleteme-ultimate-autocomplete-plugin-for-vim/
"
" 亮点：  可以兼容UltiSnips了  python 和 C的补全都很棒, 补全是字串补全, GoTo 这些子命令, 可以和go-vim兼容
"
" * INSTALL * 
" apt-get install python-dev
" cd ~/.vim/bundle
" git clone https://github.com/Valloric/YouCompleteMe.git
" cd YouCompleteMe
" git submodule update --init --recursive
" ./install.sh --clang-completer
"
" 其他
" <leader>d 是默认用于Diagnostic display的, 而且是用于C-family
" 需要用 :YcmGenerateConfig 项目根目录在根目录下生成 .ycm_extra_conf.py
" 如果生成失败，则用
" ~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py
" 需要自己修改一下前面的flags, 可以make的时候ps grep 一下看看 -I 都有些啥
" 典型的可以加上
" '-I../../include',
" '-I../include',
" '-I./include',
" '-Iinclude',
" '-I.',
" && make所出现的一些东西
let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"
let g:ycm_confirm_extra_conf=0
au FileType c,cpp,objc,objcpp,python,cs nmap gd :YcmCompleter GoToDefinition<cr>
au FileType c,cpp,objc,objcpp,python,cs nmap gD :YcmCompleter GoToDeclaration<cr>


"
" vim-go
" https://github.com/fatih/vim-go
" 集成了绝大部分go的开发环境
" 依赖 GOPATH, GOROOT
" 查文档时不会在项目里查，因为不知道项目在哪里呀！
" 所以回去系统默认的函数库中(依赖GOROOT??) 和 GOPATH/src下查询，所以设置好gopath非常重要呀
"
" 有用的命令
" :GoImports 自动import缺失工具
" :GoCallers
" 这个可能有很多可能性，只会列出一种情况(TODO:想想原理是啥，以后别被这个坑才好)
" :GoImplements 找到interface的实现， 和 GoCallers 那几个命令都是依赖于
" oracle的， 但是还不知道怎么用 g:go_oracle_scope 这个参数, 用 下面这个成功过
" let g:go_oracle_scope = 'github.com/GoogleCloudPlatform/kubernetes/cmd/kubectl XXXX'
" 但是非常的慢
au FileType go nmap <Leader>gd <Plug>(go-doc)



" 
" TComment
" https://github.com/tomtom/tcomment_vim
" gc 确定一切


" 
" vim-slime
" https://github.com/jpalardy/vim-slime
" ":i.j" means the ith window, jth pane
" C-c, C-c  --- the same as slime
" C-c, v    --- mnemonic: "variables"
let g:slime_target = "tmux"
